/************************************************************
 
    Following is the structure of the node class 
 
    class Node {
    	public :
    	int data;
    	Node *next;

    	Node(int data) {
        	this->data = data;
        	next = NULL;
    	}
	};

**************************************************************/

// class Queue {
// 	// Define the data members
//     Node*head;
//     Node*last;
//     int size;
//    public:
//     Queue() {
// 		// Implement the Constructor
//         head=NULL;
//         last=NULL;
//         size=0;
// 	}
	
// 	/*----------------- Public Functions of Stack -----------------*/

// 	int getSize() {
// 		// Implement the getSize() function
//         return size;
// 	}

//     bool isEmpty() {
// 		// Implement the isEmpty() function
//         return size==0;
// 	}

//     void enqueue(int data) {
// 		// Implement the enqueue() function
//         Node*newNode=new Node(data);
//         if(head==NULL){
//             head=last=newNode;
//             size++;
//         }else{
//             Node* temp=head;
            
//         newNode->next=temp;
//             head=newNode;
//             size++;
//         }
// 	}

//     int dequeue() {
//         // Implement the dequeue() function
//         if(isEmpty()){
//             return -1;
//         }
//         int ans=head->data;
//         Node*temp=head;
//         head=head->next;
//         delete temp;
//         size--;
//         return ans;
//     }
//     int front() {
//         // Implement the front() function
//         return head->data;
//     }
// };


class Queue {
	// Define the data members
    Node* head;
    Node* tail;
    int size;
   public:
    Queue() {
		// Implement the Constructor
        size=0;
        head=NULL;
        tail=NULL;
	}
	
	/*----------------- Public Functions of Stack -----------------*/

	int getSize() {
		// Implement the getSize() function
        return size;
	}

    bool isEmpty() {
		// Implement the isEmpty() function
        
       return size==0;
	}

    void enqueue(int data) {
		// Implement the enqueue() function
        
        if(size==0)
        {
            Node* node= new Node(data);
            head=node;
            tail=node;
            size+=1;
        }
        else
        {
            Node* node= new Node(data);
            tail->next=node;
            tail=node;
            size++;
        }
	}

    int dequeue() {
        // Implement the dequeue() function
        if(size==0)
            return -1;
        Node* node=head;
        head=head->next;
        int ele=node->data;
        delete node;
        size--;
        return ele;
    }

    int front() {
        // Implement the front() function
        if(size==0)
            return -1;
        else
        {
            int ele= head->data;
            return ele;
        }
    }
};
